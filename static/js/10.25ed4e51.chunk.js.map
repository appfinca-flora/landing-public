{"version":3,"sources":["../node_modules/react-bootstrap/esm/Container.js","../node_modules/react-intl/lib/src/components/message.js","../node_modules/react-intl/lib/src/components/useIntl.js","routes/tips/StylizeGarden/StylizeGarden.module.scss","routes/tips/StylizeGarden/banner.png","routes/tips/StylizeGarden/preview.png","routes/tips/StylizeGarden/StylizeGarden.js"],"names":["_excluded","Container","React","forwardRef","_ref","ref","bsPrefix","fluid","_ref$as","as","Component","className","props","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","suffix","createElement","_extends","classNames","displayName","defaultProps","FormattedMessage","intl","Context","invariantIntlContext","useIntl","formatMessage","_a","textComponent","Text","id","description","defaultMessage","values","children","_b","tagName","nodes","ignoreTag","Array","isArray","toArray","MemoizedFormattedMessage","prevProps","nextProps","otherProps","__rest","nextValues","nextOtherProps","shallowEqual","module","exports","StylizeGarden","locale","appContext","useContext","AppContext","styles","component","Helmet","src","preview","alt","mask","banner","primary","msg","ui","em","footer","p","ol","li"],"mappings":"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","file":"static/js/10.25ed4e51.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"fluid\", \"as\", \"className\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  fluid: false\n};\nvar Container = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      fluid = _ref.fluid,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'container');\n  var suffix = typeof fluid === 'string' ? \"-\" + fluid : '-fluid';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, fluid ? \"\" + prefix + suffix : prefix)\n  }));\n});\nContainer.displayName = 'Container';\nContainer.defaultProps = defaultProps;\nexport default Container;","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"StylizeGarden_component__3RdZS\",\"mask\":\"StylizeGarden_mask__1o6iv\",\"widget\":\"StylizeGarden_widget__14Y0v\",\"footer\":\"StylizeGarden_footer__3YwPJ\"};","module.exports = __webpack_public_path__ + \"static/media/banner.382eef52.png\";","module.exports = __webpack_public_path__ + \"static/media/preview.70a54713.png\";","import styles from \"./StylizeGarden.module.scss\";\nimport \"media/icon-font/icon-font.css\";\nimport banner from \"./banner.png\";\nimport preview from \"./preview.png\";\n\nimport React, { useContext } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { FormattedMessage } from \"react-intl\";\nimport classNames from \"classnames\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport { AppContext } from \"index.js\";\n\nexport default function StylizeGarden({ locale }) {\n  const appContext = useContext(AppContext);\n\n  return (\n    <div className={classNames(styles.component)}>\n      <Helmet>\n        <title>\n          {appContext.intl.formatMessage({\n            id: \"StylizeGarden.pageTitle\",\n            defaultMessage: \"Garden Styles\",\n          })}\n        </title>\n      </Helmet>\n\n      {/* For in-app crawling */}\n      <div className=\"d-none\">\n        <div id=\"topic\">\n          <FormattedMessage id=\"StylizeGarden.app.topic\" defaultMessage=\"Tip\" />\n        </div>\n        <div id=\"title\">\n          <FormattedMessage\n            id=\"StylizeGarden.app.title\"\n            defaultMessage=\"Your garden, your style.\"\n          />\n        </div>\n        <img id=\"banner\" src={preview} alt=\"\" />\n      </div>\n\n      <div className=\"position-relative\">\n        <div className={styles.mask}></div>\n        <img src={banner} className=\"img-fluid d-block mx-auto\" alt=\"\" />\n      </div>\n      <Container>\n        <h2 className=\"mt-4 mb-1\">\n          <FormattedMessage\n            id=\"StylizeGarden.title\"\n            defaultMessage=\"Your garden, your style.\"\n            values={{\n              primary: (msg) => (\n                <span className=\"text-primary-dark\">{msg}</span>\n              ),\n            }}\n          />\n        </h2>\n        <h6 className=\"mb-3\">\n          <FormattedMessage\n            id=\"StylizeGarden.subtitle\"\n            defaultMessage=\"Unique, fabulous, and rewarding.\"\n          />\n        </h6>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.greet1\"\n            defaultMessage=\"As a Flora user, you’ve got the task of making your <ui>Garden</ui> inviting and beautiful. Yes, you work hard to add greenery and flowers into the garden. But no, the task is not that simple.\"\n            values={{\n              ui: (msg) => <strong>{msg}</strong>,\n              em: (msg) => <em>{msg}</em>,\n            }}\n          />\n        </p>\n\n        <div className=\"d-flex justify-content-center\">\n          <p className=\"display-3\">\n            <span className=\"icon icon-format-quote-open\" />\n          </p>\n          <p className=\"lead pl-1 pt-3 font-weight-light text-black\">\n            <FormattedMessage\n              id=\"StylizeGarden.quote\"\n              defaultMessage=\"True gardening is as much about the bones of a garden as it’s planting.\"\n            />\n          </p>\n        </div>\n        <h6 className=\"text-right mb-4\">\n          <FormattedMessage\n            id=\"StylizeGarden.quote.name\"\n            defaultMessage=\"— Rosemary Verey\"\n          />\n        </h6>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.greet2\"\n            defaultMessage=\"Indeed, no garden is complete without some form of hard landscaping. You need to use your creativity and patience to unveil the true beauty of your garden.\"\n            values={{\n              ui: (msg) => <strong>{msg}</strong>,\n              em: (msg) => <em>{msg}</em>,\n            }}\n          />\n        </p>\n\n        <h4 className=\"mt-4 mb-3\">\n          <FormattedMessage\n            id=\"StylizeGarden.header.ideas\"\n            defaultMessage=\"Garden Ideas\"\n          />\n        </h4>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.steps\"\n            defaultMessage=\"Each tree in your garden lasts for 7 days. So, by strategically selecting plants to grow, you can have a completely new look in your garden at the end of every week. Trust us, it’s <em>very satisfying</em> to see your hard work visualized in a way you want. Get started by following these 3 steps: \"\n            values={{\n              ui: (msg) => <strong>{msg}</strong>,\n              em: (msg) => <em>{msg}</em>,\n            }}\n          />\n        </p>\n\n        <ol>\n          <li>\n            <p>\n              <FormattedMessage\n                id=\"StylizeGarden.step1\"\n                defaultMessage=\"At the beginning of a week, come out with a new landscaping idea based on anything such as plant colors, locations, types, or your moods, etc.\"\n                values={{ ui: (msg) => <strong>{msg}</strong> }}\n              />\n            </p>\n          </li>\n          <li>\n            <p>\n              <FormattedMessage\n                id=\"StylizeGarden.step2\"\n                defaultMessage=\"In the next 7 days, press the <ui>Seed</ui> icon on the main screen to select and grow trees following your idea.\"\n                values={{ ui: (msg) => <strong>{msg}</strong> }}\n              />\n            </p>\n          </li>\n          <li>\n            <p>\n              <FormattedMessage\n                id=\"StylizeGarden.step3\"\n                defaultMessage=\"Stick with your plan and be surprised by your lovely garden at the end of the week<em>!</em>\"\n                values={{\n                  ui: (msg) => <strong>{msg}</strong>,\n                  em: (msg) => <em>{msg}</em>,\n                }}\n              />\n            </p>\n          </li>\n        </ol>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.snapshot\"\n            defaultMessage=\"Flora will take a <ui>Snapshot</ui> of your amazing work at the end of every week. You can share it with your friends and family to challenge each to other .\"\n            values={{\n              ui: (msg) => <strong>{msg}</strong>,\n              em: (msg) => <em>{msg}</em>,\n            }}\n          />\n        </p>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.personality\"\n            defaultMessage=\"Your garden plant choices are a reflection of your personality and style preferences, whether you prefer rustic, modern, flashy, quirky, or refined. Just like artwork, garden art can show a certain mood or feeling that represents who you are., and the garden reflects , you So, at the end of every week, the garden visualizes your efforts during the week. You can make the week special by making patterns in your garden.  through the use of greenery and flowers unlocked. It’s really satisfying to see  \n            Your <ui>Garden</ui> visualizes the efforts you’ve made and is a proof of your determination.  i In addition to unlocking new plants, you can use your existing ones to design your garden to make it an exciting prospect every week.\"\n            values={{\n              ui: (msg) => <strong>{msg}</strong>,\n              em: (msg) => <em>{msg}</em>,\n            }}\n          />\n        </p>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.landscaping\"\n            defaultMessage=\"No garden is complete without some form of hard landscaping.\"\n            values={{ em: (msg) => <em>{msg}</em> }}\n          />\n        </p>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.added\"\n            defaultMessage=\"Voilà<em>!</em> You have just turned your Home screen into a lovely garden. The Flora widget will periodically sync with the main app to display the trees that you have grown. The syncing takes place about every 30 minutes. So, it may take a while to see the content.\"\n            values={{ em: (msg) => <em>{msg}</em> }}\n          />\n        </p>\n\n        <h4 className=\"mt-4 mb-3\">\n          <FormattedMessage\n            id=\"StylizeGarden.header.benefits\"\n            defaultMessage=\"Be Reminded and Motivated\"\n          />\n        </h4>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.trees\"\n            defaultMessage=\"As in the main app, each tree in the Flora widget lasts for 7 days. This means that you have to plant trees regularly to keep the widget full of life. When seeing fewer and fewer trees on the Home screen, you know it’s time to grow a new one and do your work.\"\n            values={{ em: (msg) => <em>{msg}</em> }}\n          />\n        </p>\n\n        <p>\n          <FormattedMessage\n            id=\"StylizeGarden.todos\"\n            defaultMessage=\"If you chose a large Flora widget, it also shows your to-dos, with the upcoming one highlighted on top. You will never forget important things again because they are sitting right on your Home screen. Besides, each to-do shows the progress you’ve made and reminds you of how far you’re away from your goal.\"\n            values={{ em: (msg) => <em>{msg}</em> }}\n          />\n        </p>\n\n        <p className=\"mb-5\">\n          <FormattedMessage\n            id=\"StylizeGarden.cta\"\n            defaultMessage=\"With a Flora widget, you can boost your productivity to a whole new level. Please give it a try and let us know what you think via the in-app feedback system.\"\n            values={{ em: (msg) => <em>{msg}</em> }}\n          />\n        </p>\n      </Container>\n\n      <section className={classNames(styles.footer, \"px-1 py-5\")}>\n        <Container>\n          <p className=\"q\">\n            <FormattedMessage\n              id=\"Faq.widgetEmpty.q\"\n              defaultMessage=\"Q: My widget shows nothing. What should I do?\"\n              values={{ em: (msg) => <em>{msg}</em> }}\n            />\n          </p>\n          <div>\n            <FormattedMessage\n              id=\"Faq.widgetEmpty.a\"\n              defaultMessage=\"<p>The widget syncs with the main app about every 30 minutes. So, please give it some time. If you have waited for a long time and there’s still nothing in the widget, please</p><ol><li>Update the Flora app to the latest version;</li><li>Open the app and navigate to your <ui>Garden</ui> (this is necessary);</li><li>Go back to the <ui>Home</ui> screen. Remove the widget and then add it again.</li></ol><p>The content should appear within 30 minutes. If the problem persists, please contact us via the in-app feedback system. We will help you out there.</p>\"\n              values={{\n                em: (msg) => <em>{msg}</em>,\n                ui: (msg) => <strong>{msg}</strong>,\n                p: (msg) => <p>{msg}</p>,\n                ol: (msg) => <ol>{msg}</ol>,\n                li: (msg) => (\n                  <li>\n                    <p>{msg}</p>\n                  </li>\n                ),\n              }}\n            />\n          </div>\n        </Container>\n      </section>\n    </div>\n  );\n}\n"],"sourceRoot":""}